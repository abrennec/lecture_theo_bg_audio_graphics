/* autogenerated by Processing revision 1277 on 2021-12-07 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Algol extends PApplet {

final int depthSteps = 7;
final int distance = 200;
final float goldenRatio = 1.618033988749f;
int currentFill;
int jitterFactor = 0;

 public void setup() 
{
    /* size commented out by preprocessor */;
    /* smooth commented out by preprocessor */;
    
    currentFill = 15;
}

 public void mouseReleased() 
{
    jitterFactor = 30;
}

 public void draw() 
{   
    directionalLight(255, 255, 255, 0, -1, -1);
    ambientLight(102, 102, 102);
    background(245);
    translate(width / 2, 0, -50);
    stroke(currentFill);
    fill(currentFill);
    float zfactor = map(sin(frameCount / 53.0f), -1.0f, 1.0f, 1.25f, 1.75f);

    
    for (int i = 0; i <= depthSteps; i++)
    {
        float xfactor = 30 * sin((frameCount / 47.0f) + 0.8f * i);
        float yfactor = 30 * map(sin((frameCount / 37.0f) + 0.8f * i), -1.0f, 1.0f, -1.0f, 0.0f);
        float edgeLength = (distance / 4);
        float pyramidX = (width / 2.0f) + xfactor;
        float pyramidZ = i * - distance * zfactor;
        float quadY = height / 2 * goldenRatio + yfactor;

        drawPyramid(edgeLength, -pyramidX + getJitter(jitterFactor), yfactor + getJitter(jitterFactor), pyramidZ + getJitter(jitterFactor));
        drawPyramid(edgeLength, pyramidX + getJitter(jitterFactor), yfactor + getJitter(jitterFactor), pyramidZ + getJitter(jitterFactor)); 
        drawQuad(200, distance * (zfactor / 4), xfactor + getJitter(jitterFactor), quadY + getJitter(jitterFactor), pyramidZ + getJitter(jitterFactor));     
    }   

    if(jitterFactor > 0) jitterFactor--;
}


 public void drawPyramid(float t, float posX, float posY, float posZ) 
{ 
    
    stroke(0);
    
    //this pyramid has 4 sides, each drawn as a separate triangle
    //each side has 3 vertices, making up a triangle shape
    //the parameter " t " determines the squareWidth of the pyramid
    beginShape(TRIANGLES);
    
    vertex( -t + posX, -t + posY, -t + posZ);
    vertex(t + posX, -t + posY, -t + posZ);
    vertex(posX, height / 2 * goldenRatio + posY, posZ);
    
    vertex(t + posX, -t + posY, -t + posZ);
    vertex(t + posX, -t + posY, t + posZ);
    vertex(posX, height / 2 * goldenRatio + posY, posZ);
    
    vertex(t + posX, -t + posY, t + posZ);
    vertex( -t + posX, -t + posY, t + posZ);
    vertex(posX, height / 2 * goldenRatio + posY, posZ);
    
    vertex( -t + posX, -t + posY, t + posZ);
    vertex( -t + posX, -t + posY, -t + posZ);
    vertex(posX, height / 2 * goldenRatio + posY, posZ);
    
    endShape();
}

 public void drawQuad(float squareWidth, float squareDepth, float posX, float posY, float posZ)
{
    beginShape(QUAD);
    
    fill(currentFill);
    
    vertex(-squareWidth + posX, posY, posZ);
    vertex(posX, posY,  -squareDepth + posZ);
    vertex(squareWidth + posX, posY, posZ);
    vertex(posX, posY, squareDepth + posZ);
    
    endShape();
}


 public float getJitter(int factor)
{
    return (factor / 5) * random(-1.0f, 1.0f);
}


  public void settings() { size(800, 600, P3D);
smooth(8); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Algol" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
